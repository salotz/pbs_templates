* Fill in these fields here:

** Project dir

Task directories should be organized in some way. This variable is the
path preceeding your task dir.

For instance if you working in `$HOME/this_project/task1` then your
task dir would be `$HOME/this_project`.

#+name: task-dir-path
#+BEGIN_SRC bash
  $HOME
#+END_SRC


** task name

When running PBS scripts you might want to run something multiple
times or have to deal with debugging which can become messy.
We organize by "task", which is a unit of something we want to get
done, and then organize all the outputs it produces in a sane way.

The task name must (and should) also be the name of the directory the
task is set up in.

#+name: task-name
#+BEGIN_SRC bash
  test_template
#+END_SRC


** wall time

#+name: walltime
#+BEGIN_SRC bash
  5:00
#+END_SRC

** memory
#+name: memory
#+BEGIN_SRC bash
  4gb
#+END_SRC

** number of nodes
#+name: num-nodes
#+BEGIN_SRC bash
  1
#+END_SRC

** number of processors
#+name: num-processors
#+BEGIN_SRC bash
  1
#+END_SRC

** number of GPUs

#+name: num-gpus
#+BEGIN_SRC bash
#+END_SRC

*** examples

#+BEGIN_SRC bash
    #PBS -l gpus=0
#+END_SRC



** feature

#+name: feature
#+BEGIN_SRC bash
#+END_SRC

*** examples
#+BEGIN_SRC bash
  #PBS -l feature='gpgpu:intel16'
#+END_SRC


** email
#+name: email
#+BEGIN_SRC bash
  $USER@email.com
#+END_SRC

** GNU module

This is particular to the module loding system at the Michigan State
University HPCC.

#+name: gnu-module
#+BEGIN_SRC bash
  GNU/4.8.3
#+END_SRC

** CUDA module

This is particular to the module loding system at the Michigan State
University HPCC.

#+name: cuda-module
#+BEGIN_SRC bash
  CUDA/7.0
#+END_SRC

** script parameters
#+name: script-parameters
#+BEGIN_SRC bash
#+END_SRC

** script
#+name: script
#+BEGIN_SRC bash
#+END_SRC



** Environmental Variables

#+name: env-vars
#+BEGIN_SRC bash
  export ANACONDA_DIR=$DICKSON_LAB_PROGS/anaconda3
  export ANACONDA_BIN=$ANACONDA_DIR/bin

  # PATH
  export PATH=$ANACONDA_BIN:$PATH

#+END_SRC



* Noweb Template

When you export/tangle this script the named code blocks will be
inserted into their targets marked by `<<my-target>>` for a target
called `my-target`.

#+BEGIN_SRC bash :tangle submit.pbs :noweb yes :shebang #!/bin/sh -login
  #PBS -N <<task-name>>
  #PBS -l walltime=<<walltime>>
  #PBS -l mem=<<memory>>
  #PBS -l nodes=<<num-nodes>>:ppn=<<num-processors>>
  <<num-gpus>>
  <<feature>>
  #PBS -e pbs.err
  #PBS -o pbs.out
  #PBS -M <<email>>
  #PBS -m abe

  # ------------------------------
  # Script for running the task <<task-name>> with PBS on hpcc

  # we print a simple confirmation to the terminal that we have started
  echo "Starting job"

  # the date and time this was run
  DATE=$(date)

  # task name, this is the name of the directory for the task
  TASK="<<task-name>>"
  # directory path for this task
  TASKDIR="<<task-dir-path>>/$TASK"

  # the directory with all of the input
  INPUTDIR=$TASKDIR/input
  # directory to put job results in
  JOBSDIR=$TASKDIR/jobs
  # we should redirect our own output streams but we will catch the PBS
  # files as well
  PBS_STDOUT=$PBS_O_WORKDIR/pbs.out
  PBS_STDERR=$PBS_O_WORKDIR/pbs.err

  # the job name
  JOBNAME=${TASK}-${PBS_JOBID}
  # the directory for the output of this job
  JOBDIR=$JOBSDIR/$JOBNAME

  # the directory output will be put into after completion
  BASEOUTPUTDIR=$JOBDIR/output
  OUTPUTDIR=$BASEOUTPUTDIR

  # if we are running an interactive job we want to write out the new
  # outputs to another outputs folder
  count=1
  while [ -d "$OUTPUTDIR" ]; do
    OUTPUTDIR="$BASEOUTPUTDIR$((count++))";
  done

  # log files
  LOG=$JOBDIR/log
  # directories to copy the stdout and stderr from scripts
  STDOUT=$JOBDIR/pbs.out
  STDERR=$JOBDIR/pbs.err

  # directory to execute code in
  # EXECDIR=$TMPDIR
  # EXECDIR=$MY_DICKSON_SCRATCH/$JOBNAME
  # Problems with Scratch so I will just run in the jobs dir
  # TODO make an if for different options
  EXECDIR=$JOBDIR/exec

  # make these directories if they do not exist
  mkdir -p $JOBDIR
  mkdir -p $EXECDIR
  mkdir -p $PBS_STDOUT
  mkdir -p $PBS_STDERR

  # Starting the LOG file
  echo $DATE &> $LOG
  echo "Starting Log file" &>> $LOG
  echo "----------------------------------------" &>> $LOG
  echo ""   &>> $LOG

  # write out explicitly the run parameters
  echo "* PBS Directives" &>> $LOG
  echo "----------------------------------------"  &>> $LOG
  echo "PBS Resource requests" &>> $LOG
  echo "----------------------------------------" &>> $LOG

  echo "" &>> $LOG
  echo "walltime <<walltime>>" &>> $LOG
  echo "memory <<memory>>" &>> $LOG
  echo "num-nodes <<num-nodes>>" &>> $LOG
  echo "num-processors <<num-processors>>" &>> $LOG
  echo "num-gpus <<num-gpus>>" &>> $LOG
  echo "feature <<feature>>" &>> $LOG
  echo "" &>> $LOG

  # print the paths for all the variables constructed in this script
  echo "* Path Check" &>> $LOG
  echo "----------------------------------------"  &>> $LOG
  echo "Check Paths"  &>> $LOG
  echo "----------------------------------------"  &>> $LOG

  echo "" &>> $LOG
  echo "LOG $LOG" &>> $LOG
  echo "PBS_JOBID $PBS_JOBID" &>> $LOG
  echo "TASK $TASK" &>> $LOG
  echo "TASKDIR $TASKDIR" &>> $LOG
  echo "INPUTDIR $INPUTDIR" &>> $LOG
  echo "JOBSDIR $JOBSDIR" &>> $LOG
  echo "JOBNAME $JOBNAME" &>> $LOG
  echo "JOBDIR $JOBDIR" &>> $LOG
  echo "OUTPUTDIR $OUTPUTDIR" &>> $LOG
  echo "EXECDIR $EXECDIR" &>> $LOG
  echo "STDOUT $STDOUT" &>> $LOG
  echo "STDERR $STDERR" &>> $LOG
  echo "PBS_STDOUT $PBS_STDOUT" &>> $LOG
  echo "PBS_STDERR $PBS_STDERR" &>> $LOG
  echo "PBS_NODEFILE" &>> $LOG
  cat $PBS_NODEFILE &>> $LOG
  echo ""  &>> $LOG

  # saving PBS environmental variables
  echo "* Environmental Variables" &>> $LOG
  echo "----------------------------------------"  &>> $LOG
  echo "PBS Environmental Variables" &>> $LOG
  echo "----------------------------------------" &>> $LOG

  echo ""   &>> $LOG
  # PBS env vars
  echo "PBS ENV:"  &>> $LOG
  env | grep PBS  &>> $LOG

  # PBS JOBID number
  echo "* PBS Job info" &>> $LOG
  echo "PBS_JOBID number"  &>> $LOG
  PBS_JOBID_NUM=(${PBS_JOBID//./ })
  echo "PBS_JOBID_NUM: $PBS_JOBID_NUM" &>> $LOG

  # PBS stdout and stderr file paths
  PBS_JOB_STDOUT="$PBS_STDOUT/$TASK.o$PBS_JOBID_NUM"
  PBS_JOB_STDERR="$PBS_STDERR/$TASK.e$PBS_JOBID_NUM"

  # NODEFILE
  echo "PBS_NODEFILE:"  &>> $LOG
  cat $PBS_NODEFILE  &>> $LOG
  # GPUFILE
  echo "PBS_GPUFILE:"  &>> $LOG
  cat $PBS_GPUFILE  &>> $LOG
  # MICFILE
  echo "PBS_MICFILE:"  &>> $LOG
  cat $PBS_MICFILE  &>> $LOG
  echo ""  &>> $LOG

  # initial
  echo "* Environment Initialization" &>> $LOG
  echo ""  &>> $LOG
  echo "----------------------------------------" &>> $LOG
  echo "Initialization" &>> $LOG
  echo "----------------------------------------" &>> $LOG

  # load profile
  echo "------------" &>> $LOG
  echo "RUNNING: source /etc/profile" &>> $LOG
  echo "------------" &>> $LOG
  source /etc/profile &>> $LOG
  echo "" &>> $LOG

  # load hpcc modules
  echo "------------" &>> $LOG
  echo "RUNNING: source /opt/software/modulefiles/setup_modules.sh" &>> $LOG
  echo "------------" &>> $LOG
  source /opt/software/modulefiles/setup_modules.sh &>> $LOG
  echo "" &>> $LOG

  # load specific library modules
  # GNU Compilers
  echo "------------" &>> $LOG
  echo "RUNNING: module load <<gnu-module>>" &>> $LOG
  echo "------------" &>> $LOG
  module load <<gnu-module>> &>> $LOG
  echo "" &>> $LOG

  # CUDA compilers
  echo "------------" &>> $LOG
  echo "RUNNING: module load <<cuda-module>>" &>> $LOG
  echo "------------" &>> $LOG
  module load <<cuda-module>> &>> $LOG
  echo "" &>> $LOG


  # set environmental variables and other local variables that are used for 
  # many types of scripts
  # ===============================================================================
  echo "------------" &>> $LOG
  echo "Setting environmental variables"  &>> $LOG
  echo "------------" &>> $LOG

  <<env-vars>>
  # ===============================================================================

  echo "* Preparing Execution Directory" &>> $LOG
  # remove current contents of the execdir, useful for if running
  # interactive job which writes to same dir, harmless if not
  echo "------------" &>> $LOG
  echo "Removing existing files if they exist in EXECDIR: $EXECDIR" &>> $LOG
  echo "------------" &>> $LOG
  rm -rf $EXECDIR/* &>> $LOG
  echo "" &>> $LOG

  # copy the input files to the execution directory
  echo "------------" &>> $LOG
  echo "Copying input files from INPUTDIR: $INPUTDIR to EXECDIR: $EXECDIR" &>> $LOG
  echo "------------" &>> $LOG
  cp -rf $INPUTDIR/* $EXECDIR/ &>> $LOG
  echo "" &>> $LOG

  # copy the actual submission script used
  echo "------------" &>> $LOG
  echo "Copying submission script ${TASKDIR}/${PBS_JOBNAME} to EXECDIR: $EXECDIR" &>> $LOG
  echo "------------" &>> $LOG
  cp "${0}" $EXECDIR/ &>> $LOG
  echo "" &>> $LOG

  # change to the exec dir
  echo "------------" &>> $LOG
  echo "moving to EXECDIR: $EXECDIR" &>> $LOG
  echo "------------" &>> $LOG
  cd $EXECDIR &>> $LOG
  echo "" &>> $LOG

  # write file names in $EXECDIR to log
  echo "------------" &>> $LOG
  echo "listing of EXECDIR: $EXECDIR" &>> $LOG
  echo "------------" &>> $LOG
  ls $EXECDIR &>> $LOG
  echo "" &>> $LOG

  # print out the environmental variables after modifications
  echo "------------" &>> $LOG
  echo "Environmental variables before execution:"  &>> $LOG
  echo "------------" &>> $LOG
  env &>> $LOG
  echo ""   &>> $LOG

  # ------------------------------
  # set the parameters that will be used in this script
  # ===============================================================================
  echo "* Script Parameters" &>> $LOG
  echo "------------" &>> $LOG
  echo "Setting Script parameters"  &>> $LOG
  echo "------------" &>> $LOG
  echo ""   &>> $LOG

  <<script-parameters>>

  echo ""   &>> $LOG
  # ===============================================================================


  # ------------------------------
  # The code for this script
  # ===============================================================================

  # we print a simple confirmation to the terminal that we are starting the main script
  echo "Starting main script"

  echo "* Script" &>> $LOG
  echo "------------" &>> $LOG
  echo "Running script" &>> $LOG
  echo "===============================================================================" &>> $LOG

  <<script>>

  echo "===============================================================================" &>> $LOG
  echo "done with script" &>> $LOG
  echo "------------" &>> $LOG
  echo ""   &>> $LOG

  # we print a simple confirmation to the terminal that we are starting the main script
  echo "Finished main script"

  # ===============================================================================

  # move the output files in EXECDIR back to the job output dir
  echo "* Clean Up" &>> $LOG
  echo "------------" &>> $LOG
  echo "moving EXECDIR $EXECDIR to OUTPUTDIR $OUTPUTDIR" &>> $LOG
  echo "------------" &>> $LOG
  mv $EXECDIR $OUTPUTDIR  &>> $LOG
  echo ""   &>> $LOG


  # move the PBS stdout and stderr files to the jobdir
  echo "------------" &>> $LOG
  echo "PBS STDOUT is in $PBS_JOB_STDOUT" &>> $LOG
  echo "------------" &>> $LOG
  echo ""   &>> $LOG

  echo "------------" &>> $LOG
  echo "PBS STDERR $PBS_JOB_STDERR" &>> $LOG
  echo "------------" &>> $LOG

  # The last thing we do is move the log file to the output
  echo "------------" 1>> $LOG 2>> $LOG
  echo "moving LOG $LOG to OUTPUTDIR $OUTPUTDIR" 1>> $LOG 2>> $LOG
  echo "------------" 1>> $LOG 2>> $LOG
  mv $LOG $OUTPUTDIR/  1>> $LOG 2>> $LOG

  # print to the main terminal that we are done
  echo "Done with job"
#+END_SRC
